Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMA
    SPACE

Grammar

Rule 0     S' -> strace_line
Rule 1     strace_line -> NUMBER syscall
Rule 2     strace_line -> NUMBER syscall error_message
Rule 3     syscall -> SYMBOL LEFT_PAREN arg_list RIGHT_PAREN result
Rule 4     syscall -> SYMBOL LEFT_PAREN RIGHT_PAREN result
Rule 5     syscall -> SYMBOL LEFT_PAREN arg_list RIGHT_PAREN
Rule 6     syscall -> SYMBOL LEFT_PAREN RIGHT_PAREN
Rule 7     error_message -> ERRNO_S result LEFT_PAREN arg_list RIGHT_PAREN
Rule 8     result -> EQUALS NUMBER
Rule 9     result -> EQUALS HEX_NUMBER
Rule 10    arg_list -> arg_list SYMBOL
Rule 11    arg_list -> arg_list STRING
Rule 12    arg_list -> arg_list NUMBER
Rule 13    arg_list -> arg_list HEX_NUMBER
Rule 14    arg_list -> SYMBOL
Rule 15    arg_list -> STRING
Rule 16    arg_list -> NUMBER
Rule 17    arg_list -> HEX_NUMBER

Terminals, with rules where they appear

COMMA                : 
EQUALS               : 8 9
ERRNO_S              : 7
HEX_NUMBER           : 9 13 17
LEFT_PAREN           : 3 4 5 6 7
NUMBER               : 1 2 8 12 16
RIGHT_PAREN          : 3 4 5 6 7
SPACE                : 
STRING               : 11 15
SYMBOL               : 3 4 5 6 10 14
error                : 

Nonterminals, with rules where they appear

arg_list             : 3 5 7 10 11 12 13
error_message        : 2
result               : 3 4 7
strace_line          : 0
syscall              : 1 2

Parsing method: LALR

state 0

    (0) S' -> . strace_line
    (1) strace_line -> . NUMBER syscall
    (2) strace_line -> . NUMBER syscall error_message

    NUMBER          shift and go to state 2

    strace_line                    shift and go to state 1

state 1

    (0) S' -> strace_line .



state 2

    (1) strace_line -> NUMBER . syscall
    (2) strace_line -> NUMBER . syscall error_message
    (3) syscall -> . SYMBOL LEFT_PAREN arg_list RIGHT_PAREN result
    (4) syscall -> . SYMBOL LEFT_PAREN RIGHT_PAREN result
    (5) syscall -> . SYMBOL LEFT_PAREN arg_list RIGHT_PAREN
    (6) syscall -> . SYMBOL LEFT_PAREN RIGHT_PAREN

    SYMBOL          shift and go to state 4

    syscall                        shift and go to state 3

state 3

    (1) strace_line -> NUMBER syscall .
    (2) strace_line -> NUMBER syscall . error_message
    (7) error_message -> . ERRNO_S result LEFT_PAREN arg_list RIGHT_PAREN

    $end            reduce using rule 1 (strace_line -> NUMBER syscall .)
    ERRNO_S         shift and go to state 6

    error_message                  shift and go to state 5

state 4

    (3) syscall -> SYMBOL . LEFT_PAREN arg_list RIGHT_PAREN result
    (4) syscall -> SYMBOL . LEFT_PAREN RIGHT_PAREN result
    (5) syscall -> SYMBOL . LEFT_PAREN arg_list RIGHT_PAREN
    (6) syscall -> SYMBOL . LEFT_PAREN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 7


state 5

    (2) strace_line -> NUMBER syscall error_message .

    $end            reduce using rule 2 (strace_line -> NUMBER syscall error_message .)


state 6

    (7) error_message -> ERRNO_S . result LEFT_PAREN arg_list RIGHT_PAREN
    (8) result -> . EQUALS NUMBER
    (9) result -> . EQUALS HEX_NUMBER

    EQUALS          shift and go to state 9

    result                         shift and go to state 8

state 7

    (3) syscall -> SYMBOL LEFT_PAREN . arg_list RIGHT_PAREN result
    (4) syscall -> SYMBOL LEFT_PAREN . RIGHT_PAREN result
    (5) syscall -> SYMBOL LEFT_PAREN . arg_list RIGHT_PAREN
    (6) syscall -> SYMBOL LEFT_PAREN . RIGHT_PAREN
    (10) arg_list -> . arg_list SYMBOL
    (11) arg_list -> . arg_list STRING
    (12) arg_list -> . arg_list NUMBER
    (13) arg_list -> . arg_list HEX_NUMBER
    (14) arg_list -> . SYMBOL
    (15) arg_list -> . STRING
    (16) arg_list -> . NUMBER
    (17) arg_list -> . HEX_NUMBER

    RIGHT_PAREN     shift and go to state 12
    SYMBOL          shift and go to state 10
    STRING          shift and go to state 13
    NUMBER          shift and go to state 14
    HEX_NUMBER      shift and go to state 15

    arg_list                       shift and go to state 11

state 8

    (7) error_message -> ERRNO_S result . LEFT_PAREN arg_list RIGHT_PAREN

    LEFT_PAREN      shift and go to state 16


state 9

    (8) result -> EQUALS . NUMBER
    (9) result -> EQUALS . HEX_NUMBER

    NUMBER          shift and go to state 17
    HEX_NUMBER      shift and go to state 18


state 10

    (14) arg_list -> SYMBOL .

    RIGHT_PAREN     reduce using rule 14 (arg_list -> SYMBOL .)
    SYMBOL          reduce using rule 14 (arg_list -> SYMBOL .)
    STRING          reduce using rule 14 (arg_list -> SYMBOL .)
    NUMBER          reduce using rule 14 (arg_list -> SYMBOL .)
    HEX_NUMBER      reduce using rule 14 (arg_list -> SYMBOL .)


state 11

    (3) syscall -> SYMBOL LEFT_PAREN arg_list . RIGHT_PAREN result
    (5) syscall -> SYMBOL LEFT_PAREN arg_list . RIGHT_PAREN
    (10) arg_list -> arg_list . SYMBOL
    (11) arg_list -> arg_list . STRING
    (12) arg_list -> arg_list . NUMBER
    (13) arg_list -> arg_list . HEX_NUMBER

    RIGHT_PAREN     shift and go to state 20
    SYMBOL          shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    HEX_NUMBER      shift and go to state 23


state 12

    (4) syscall -> SYMBOL LEFT_PAREN RIGHT_PAREN . result
    (6) syscall -> SYMBOL LEFT_PAREN RIGHT_PAREN .
    (8) result -> . EQUALS NUMBER
    (9) result -> . EQUALS HEX_NUMBER

    ERRNO_S         reduce using rule 6 (syscall -> SYMBOL LEFT_PAREN RIGHT_PAREN .)
    $end            reduce using rule 6 (syscall -> SYMBOL LEFT_PAREN RIGHT_PAREN .)
    EQUALS          shift and go to state 9

    result                         shift and go to state 24

state 13

    (15) arg_list -> STRING .

    RIGHT_PAREN     reduce using rule 15 (arg_list -> STRING .)
    SYMBOL          reduce using rule 15 (arg_list -> STRING .)
    STRING          reduce using rule 15 (arg_list -> STRING .)
    NUMBER          reduce using rule 15 (arg_list -> STRING .)
    HEX_NUMBER      reduce using rule 15 (arg_list -> STRING .)


state 14

    (16) arg_list -> NUMBER .

    RIGHT_PAREN     reduce using rule 16 (arg_list -> NUMBER .)
    SYMBOL          reduce using rule 16 (arg_list -> NUMBER .)
    STRING          reduce using rule 16 (arg_list -> NUMBER .)
    NUMBER          reduce using rule 16 (arg_list -> NUMBER .)
    HEX_NUMBER      reduce using rule 16 (arg_list -> NUMBER .)


state 15

    (17) arg_list -> HEX_NUMBER .

    RIGHT_PAREN     reduce using rule 17 (arg_list -> HEX_NUMBER .)
    SYMBOL          reduce using rule 17 (arg_list -> HEX_NUMBER .)
    STRING          reduce using rule 17 (arg_list -> HEX_NUMBER .)
    NUMBER          reduce using rule 17 (arg_list -> HEX_NUMBER .)
    HEX_NUMBER      reduce using rule 17 (arg_list -> HEX_NUMBER .)


state 16

    (7) error_message -> ERRNO_S result LEFT_PAREN . arg_list RIGHT_PAREN
    (10) arg_list -> . arg_list SYMBOL
    (11) arg_list -> . arg_list STRING
    (12) arg_list -> . arg_list NUMBER
    (13) arg_list -> . arg_list HEX_NUMBER
    (14) arg_list -> . SYMBOL
    (15) arg_list -> . STRING
    (16) arg_list -> . NUMBER
    (17) arg_list -> . HEX_NUMBER

    SYMBOL          shift and go to state 10
    STRING          shift and go to state 13
    NUMBER          shift and go to state 14
    HEX_NUMBER      shift and go to state 15

    arg_list                       shift and go to state 25

state 17

    (8) result -> EQUALS NUMBER .

    LEFT_PAREN      reduce using rule 8 (result -> EQUALS NUMBER .)
    ERRNO_S         reduce using rule 8 (result -> EQUALS NUMBER .)
    $end            reduce using rule 8 (result -> EQUALS NUMBER .)


state 18

    (9) result -> EQUALS HEX_NUMBER .

    LEFT_PAREN      reduce using rule 9 (result -> EQUALS HEX_NUMBER .)
    ERRNO_S         reduce using rule 9 (result -> EQUALS HEX_NUMBER .)
    $end            reduce using rule 9 (result -> EQUALS HEX_NUMBER .)


state 19

    (10) arg_list -> arg_list SYMBOL .

    RIGHT_PAREN     reduce using rule 10 (arg_list -> arg_list SYMBOL .)
    SYMBOL          reduce using rule 10 (arg_list -> arg_list SYMBOL .)
    STRING          reduce using rule 10 (arg_list -> arg_list SYMBOL .)
    NUMBER          reduce using rule 10 (arg_list -> arg_list SYMBOL .)
    HEX_NUMBER      reduce using rule 10 (arg_list -> arg_list SYMBOL .)


state 20

    (3) syscall -> SYMBOL LEFT_PAREN arg_list RIGHT_PAREN . result
    (5) syscall -> SYMBOL LEFT_PAREN arg_list RIGHT_PAREN .
    (8) result -> . EQUALS NUMBER
    (9) result -> . EQUALS HEX_NUMBER

    ERRNO_S         reduce using rule 5 (syscall -> SYMBOL LEFT_PAREN arg_list RIGHT_PAREN .)
    $end            reduce using rule 5 (syscall -> SYMBOL LEFT_PAREN arg_list RIGHT_PAREN .)
    EQUALS          shift and go to state 9

    result                         shift and go to state 26

state 21

    (11) arg_list -> arg_list STRING .

    RIGHT_PAREN     reduce using rule 11 (arg_list -> arg_list STRING .)
    SYMBOL          reduce using rule 11 (arg_list -> arg_list STRING .)
    STRING          reduce using rule 11 (arg_list -> arg_list STRING .)
    NUMBER          reduce using rule 11 (arg_list -> arg_list STRING .)
    HEX_NUMBER      reduce using rule 11 (arg_list -> arg_list STRING .)


state 22

    (12) arg_list -> arg_list NUMBER .

    RIGHT_PAREN     reduce using rule 12 (arg_list -> arg_list NUMBER .)
    SYMBOL          reduce using rule 12 (arg_list -> arg_list NUMBER .)
    STRING          reduce using rule 12 (arg_list -> arg_list NUMBER .)
    NUMBER          reduce using rule 12 (arg_list -> arg_list NUMBER .)
    HEX_NUMBER      reduce using rule 12 (arg_list -> arg_list NUMBER .)


state 23

    (13) arg_list -> arg_list HEX_NUMBER .

    RIGHT_PAREN     reduce using rule 13 (arg_list -> arg_list HEX_NUMBER .)
    SYMBOL          reduce using rule 13 (arg_list -> arg_list HEX_NUMBER .)
    STRING          reduce using rule 13 (arg_list -> arg_list HEX_NUMBER .)
    NUMBER          reduce using rule 13 (arg_list -> arg_list HEX_NUMBER .)
    HEX_NUMBER      reduce using rule 13 (arg_list -> arg_list HEX_NUMBER .)


state 24

    (4) syscall -> SYMBOL LEFT_PAREN RIGHT_PAREN result .

    ERRNO_S         reduce using rule 4 (syscall -> SYMBOL LEFT_PAREN RIGHT_PAREN result .)
    $end            reduce using rule 4 (syscall -> SYMBOL LEFT_PAREN RIGHT_PAREN result .)


state 25

    (7) error_message -> ERRNO_S result LEFT_PAREN arg_list . RIGHT_PAREN
    (10) arg_list -> arg_list . SYMBOL
    (11) arg_list -> arg_list . STRING
    (12) arg_list -> arg_list . NUMBER
    (13) arg_list -> arg_list . HEX_NUMBER

    RIGHT_PAREN     shift and go to state 27
    SYMBOL          shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    HEX_NUMBER      shift and go to state 23


state 26

    (3) syscall -> SYMBOL LEFT_PAREN arg_list RIGHT_PAREN result .

    ERRNO_S         reduce using rule 3 (syscall -> SYMBOL LEFT_PAREN arg_list RIGHT_PAREN result .)
    $end            reduce using rule 3 (syscall -> SYMBOL LEFT_PAREN arg_list RIGHT_PAREN result .)


state 27

    (7) error_message -> ERRNO_S result LEFT_PAREN arg_list RIGHT_PAREN .

    $end            reduce using rule 7 (error_message -> ERRNO_S result LEFT_PAREN arg_list RIGHT_PAREN .)

