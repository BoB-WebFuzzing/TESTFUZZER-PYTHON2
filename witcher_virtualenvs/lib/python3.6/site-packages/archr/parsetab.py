
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMA EQUALS ERRNO_S HEX_NUMBER LEFT_PAREN NUMBER RIGHT_PAREN SPACE STRING SYMBOL\n    strace_line : NUMBER syscall\n    strace_line : NUMBER syscall error_message\n    \n    syscall : SYMBOL LEFT_PAREN arg_list RIGHT_PAREN result\n    syscall : SYMBOL LEFT_PAREN RIGHT_PAREN result\n    syscall : SYMBOL LEFT_PAREN arg_list RIGHT_PAREN\n    syscall : SYMBOL LEFT_PAREN RIGHT_PAREN\n    \n    error_message : ERRNO_S result LEFT_PAREN arg_list RIGHT_PAREN\n    \n    result : EQUALS NUMBER\n    result : EQUALS HEX_NUMBER\n    \n    arg_list : arg_list SYMBOL\n    arg_list : arg_list STRING\n    arg_list : arg_list NUMBER\n    arg_list : arg_list HEX_NUMBER\n    arg_list : SYMBOL\n    arg_list : STRING\n    arg_list : NUMBER\n    arg_list : HEX_NUMBER\n    '
    
_lr_action_items = {'NUMBER':([0,7,9,10,11,13,14,15,16,19,21,22,23,25,],[2,14,17,-14,22,-15,-16,-17,14,-10,-11,-12,-13,22,]),'$end':([1,3,5,12,17,18,20,24,26,27,],[0,-1,-2,-6,-8,-9,-5,-4,-3,-7,]),'SYMBOL':([2,7,10,11,13,14,15,16,19,21,22,23,25,],[4,10,-14,19,-15,-16,-17,10,-10,-11,-12,-13,19,]),'ERRNO_S':([3,12,17,18,20,24,26,],[6,-6,-8,-9,-5,-4,-3,]),'LEFT_PAREN':([4,8,17,18,],[7,16,-8,-9,]),'EQUALS':([6,12,20,],[9,9,9,]),'RIGHT_PAREN':([7,10,11,13,14,15,19,21,22,23,25,],[12,-14,20,-15,-16,-17,-10,-11,-12,-13,27,]),'STRING':([7,10,11,13,14,15,16,19,21,22,23,25,],[13,-14,21,-15,-16,-17,13,-10,-11,-12,-13,21,]),'HEX_NUMBER':([7,9,10,11,13,14,15,16,19,21,22,23,25,],[15,18,-14,23,-15,-16,-17,15,-10,-11,-12,-13,23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'strace_line':([0,],[1,]),'syscall':([2,],[3,]),'error_message':([3,],[5,]),'result':([6,12,20,],[8,24,26,]),'arg_list':([7,16,],[11,25,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> strace_line","S'",1,None,None,None),
  ('strace_line -> NUMBER syscall','strace_line',2,'p_strace_line','strace_parser.py',193),
  ('strace_line -> NUMBER syscall error_message','strace_line',3,'p_strace_line','strace_parser.py',194),
  ('syscall -> SYMBOL LEFT_PAREN arg_list RIGHT_PAREN result','syscall',5,'p_syscall','strace_parser.py',200),
  ('syscall -> SYMBOL LEFT_PAREN RIGHT_PAREN result','syscall',4,'p_syscall','strace_parser.py',201),
  ('syscall -> SYMBOL LEFT_PAREN arg_list RIGHT_PAREN','syscall',4,'p_syscall','strace_parser.py',202),
  ('syscall -> SYMBOL LEFT_PAREN RIGHT_PAREN','syscall',3,'p_syscall','strace_parser.py',203),
  ('error_message -> ERRNO_S result LEFT_PAREN arg_list RIGHT_PAREN','error_message',5,'p_error_message','strace_parser.py',217),
  ('result -> EQUALS NUMBER','result',2,'p_result','strace_parser.py',223),
  ('result -> EQUALS HEX_NUMBER','result',2,'p_result','strace_parser.py',224),
  ('arg_list -> arg_list SYMBOL','arg_list',2,'p_arg_list','strace_parser.py',230),
  ('arg_list -> arg_list STRING','arg_list',2,'p_arg_list','strace_parser.py',231),
  ('arg_list -> arg_list NUMBER','arg_list',2,'p_arg_list','strace_parser.py',232),
  ('arg_list -> arg_list HEX_NUMBER','arg_list',2,'p_arg_list','strace_parser.py',233),
  ('arg_list -> SYMBOL','arg_list',1,'p_arg_list','strace_parser.py',234),
  ('arg_list -> STRING','arg_list',1,'p_arg_list','strace_parser.py',235),
  ('arg_list -> NUMBER','arg_list',1,'p_arg_list','strace_parser.py',236),
  ('arg_list -> HEX_NUMBER','arg_list',1,'p_arg_list','strace_parser.py',237),
]
